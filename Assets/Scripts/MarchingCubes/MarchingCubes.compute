#pragma kernel MeshReconstruction // 0
#pragma kernel ClearUnused // 1
#pragma kernel Carve // 2
#pragma kernel CarveCapsule // 3
#pragma kernel ClearCollisionBuffer // 4

// Workaround for the absence of sizeof operator in HLSL
#define SIZEOF_UINT 4
#define SIZEOF_FLOAT3 12
#define SIZEOF_FLOAT2 8

// Object parameters
uint3 Dims; // number of voxels
float3 DestructiblePosition; // global position of the [0,0,0]'th voxel

RWStructuredBuffer<float> Voxels;
RWStructuredBuffer<float2> VoxelUV;
RWStructuredBuffer<float> VoxelToughness;
RWStructuredBuffer<float> CollisionInfo;

// Marching Cubes Parameters
uint MaxTriangle;
float Scale;
float Isovalue;
StructuredBuffer<uint2> TriangleTable;
RWByteAddressBuffer VertexBuffer;
RWByteAddressBuffer IndexBuffer;
RWStructuredBuffer<uint> Counter; // number of triangles

// Carving tool parameters
float ToolPower;
float3 ToolPosition; // Sphere tip center
float ToolRange; // Sphere tip radius
float3 capsuleToolA; // tip
float3 capsuleToolB; // bottom
float capsuleToolRange; // radius

// Grid space to object space transformation
float3 TransformPoint(float3 p)
{
    return (p + 0.5 - Dims / 2) * Scale;
}

uint EdgeIndexFromTriangleTable(uint2 data, uint index)
{
    return 0xfu & (index < 8 ? data.x >> ((index + 0) * 4) :
                               data.y >> ((index - 8) * 4));
}

float GetVoxelValue(uint x, uint y, uint z)
{
    return Voxels[z + y * Dims.z + x * Dims.y * Dims.z];
}

float2 GetVoxelUV(uint x, uint y, uint z)
{
    return VoxelUV[z + y * Dims.z + x * Dims.y * Dims.z];
}

void SetVoxelValue(uint x, uint y, uint z, float value)
{
    Voxels[z + y * Dims.z + x * Dims.y * Dims.z] = value;
}

float GetVoxelToughness(uint x, uint y, uint z)
{
    return VoxelToughness[z + y * Dims.z + x * Dims.y * Dims.z];
}

float4 VoxelValueWithGradient(uint3 i)
{
    uint3 i_n = max(i, 1) - 1;
    uint3 i_p = min(i + 1, Dims - 1);
    float v = GetVoxelValue(i.x, i.y, i.z);
    float v_nx = GetVoxelValue(i_n.x, i.y, i.z);
    float v_px = GetVoxelValue(i_p.x, i.y, i.z);
    float v_ny = GetVoxelValue(i.x, i_n.y, i.z);
    float v_py = GetVoxelValue(i.x, i_p.y, i.z);
    float v_nz = GetVoxelValue(i.x, i.y, i_n.z);
    float v_pz = GetVoxelValue(i.x, i.y, i_p.z);
    return float4(v_px - v_nx, v_py - v_ny, v_pz - v_nz, v);
}

// Vertex buffer accessor
void WriteVertex(uint offset, float3 p, float3 n, float2 uv)
{
    uint addr_p = offset * (SIZEOF_FLOAT3 * 2 + SIZEOF_FLOAT2);
    uint addr_n = addr_p + SIZEOF_FLOAT3;
    uint addr_uv = addr_n + SIZEOF_FLOAT3;
    VertexBuffer.Store3(addr_p, asuint(p));
    VertexBuffer.Store3(addr_n, asuint(n));
    VertexBuffer.Store2(addr_uv, asuint(uv));
}

// Index buffer accessor
void WriteIndices(uint offset, uint3 indices)
{
    IndexBuffer.Store3(offset * SIZEOF_UINT, indices);
}

//
// Cube geometry/topology
//
// This must match one defined in Paul Bourke's article:
// http://paulbourke.net/geometry/polygonise/
uint3 CubeVertex(uint index)
{
    bool x = index & 1;
    bool y = index & 2;
    bool z = index & 4;
    return uint3(x ^ y, y, z);
}

uint2 EdgeVertexPair(uint index)
{
    // (0, 1) (1, 2) (2, 3) (3, 0)
    // (4, 5) (5, 6) (6, 7) (7, 4)
    // (0, 4) (1, 5) (2, 6) (3, 7)
    uint v1 = index & 7;
    uint v2 = index < 8 ? ((index + 1) & 3) | (index & 4) : v1 + 4;
    return uint2(v1, v2);
}

// Marching cube mesh reconstruction kernel
[numthreads(4, 4, 4)]
void MeshReconstruction(uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if (any(id + 1 >= Dims.xyz)) return;

    // Voxel samples at each cube vertex
    float4 samples[8];
    for (uint i = 0; i < 8; i++)
        samples[i] = VoxelValueWithGradient(id + CubeVertex(i));

    // Cube configuration selector
    // (initialized as a bit field of vertex binary states)
    uint selector = 0;
    for (i = 0; i < 8; i++)
        selector |= (samples[i].w < Isovalue) << i;

    // Special case for empty cubes; Exit ealy if there is no intersection.
    if (selector == 0 || selector == 0xff) return;

    // Intersection points on each edge
    // We do this in a GPU-oriented way; Do the calculation on all the edges
    // including ones without an intersection.
    float3 vertices[12];
    float3 normals[12];
    float2 uvs[12];
    for (i = 0; i < 12; i++)
    {
        uint2 pair = EdgeVertexPair(i);
        float4 sample1 = samples[pair.x];
        float4 sample2 = samples[pair.y];
        float3 vertex1 = id + CubeVertex(pair.x);
        float3 vertex2 = id + CubeVertex(pair.y);
        float param = (Isovalue - sample1.w) / (sample2.w - sample1.w);
        vertices[i] = TransformPoint(lerp(vertex1, vertex2, param));
        uvs[i] = lerp(GetVoxelUV(vertex1.x, vertex1.y, vertex1.z), GetVoxelUV(vertex2.x, vertex2.y, vertex2.z), param);
        normals[i] = -normalize(lerp(sample1.xyz, sample2.xyz, param));
    }

    // Output triangles in the selected cube configuration.
    uint2 tri_data = TriangleTable[selector];
    for (i = 0; i < 15; i += 3)
    {
        uint e1 = EdgeIndexFromTriangleTable(tri_data, i);
        uint e2 = EdgeIndexFromTriangleTable(tri_data, i + 1);
        uint e3 = EdgeIndexFromTriangleTable(tri_data, i + 2);
        if (e1 == 15) return;

        uint count = Counter.IncrementCounter();
        if (count >= MaxTriangle) return;

        uint vidx = count * 3;
        WriteVertex(vidx + 0, vertices[e1], normals[e1], uvs[e1]);
        WriteVertex(vidx + 1, vertices[e2], normals[e2], uvs[e2]);
        WriteVertex(vidx + 2, vertices[e3], normals[e3], uvs[e3]);
        WriteIndices(vidx, uint3(vidx, vidx + 1, vidx + 2));
    }
}

// Cleanup kernel that clears the unused area of the buffers
[numthreads(64, 1, 1)]
void ClearUnused(uint id : SV_DispatchThreadID)
{
    while (true)
    {
        uint count = Counter.IncrementCounter();
        if (count >= MaxTriangle) break;
        uint vidx = count * 3;
        WriteVertex(vidx + 0, 0, 0,0);
        WriteVertex(vidx + 1, 0, 0,0);
        WriteVertex(vidx + 2, 0, 0,0);
        WriteIndices(vidx, uint3(0, 0, 0));
    }
}

// Kernel for carving the object with sphere tip
[numthreads(4, 4, 4)]
void Carve(uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if (any(id + 1 >= Dims.xyz)) return;

    // Calculate voxel's global position
    float3 voxelPos = DestructiblePosition;
    voxelPos += float3(id.x, id.y, id.z) * Scale;

    // Check if voxel is inside the carving tool's range
    if (length(ToolPosition - voxelPos) < ToolRange * ToolRange) {
        float voxelVal = GetVoxelValue(id.x, id.y, id.z);
        if(voxelVal > 0)
        {
            CollisionInfo[id.z + id.y * Dims.z + id.x * Dims.y * Dims.z] = GetVoxelToughness(id.x,id.y,id.z);
            CollisionInfo[0] = 1.0; // debug
        }
        float carveAmount = (ToolPower * (1.0 - GetVoxelToughness(id.x,id.y,id.z))) / 1000.0;
        SetVoxelValue(id.x, id.y, id.z, voxelVal - carveAmount);
    }
}

// Kernel for carving the object with capsule tip
[numthreads(4, 4, 4)]
void CarveCapsule(uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if (any(id + 1 >= Dims.xyz)) return;

    // Calculate voxel's global position
    float3 voxelPos = DestructiblePosition;
    voxelPos += float3(id.x, id.y, id.z) * Scale;

    float3 pa = voxelPos - capsuleToolA;
    float3 ba = capsuleToolB - capsuleToolA;
    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);
    // Check if voxel is inside the carving tool's range
    if (length(pa - ba*h) < capsuleToolRange * capsuleToolRange) {
        float voxelVal = GetVoxelValue(id.x, id.y, id.z);
        // if(voxelVal < -1.0) return;
        if(voxelVal > 0)
        {
            CollisionInfo[id.z + id.y * Dims.z + id.x * Dims.y * Dims.z] = GetVoxelToughness(id.x,id.y,id.z);
            CollisionInfo[0] = 1.0; // debug
        }
        float carveAmount = (ToolPower * (1.0 - GetVoxelToughness(id.x,id.y,id.z))) / 1000.0;
        SetVoxelValue(id.x, id.y, id.z, voxelVal - carveAmount);
    }
}

// Kernel for clearing collision info buffer
[numthreads(4, 4, 4)]
void ClearCollisionBuffer(uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if (any(id + 1 >= Dims.xyz)) return;
    
    CollisionInfo[id.z + id.y * Dims.z + id.x * Dims.y * Dims.z] = 0.0;
}
