//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Tool/ToolInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ToolInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ToolInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ToolInputActions"",
    ""maps"": [
        {
            ""name"": ""GamepadMap"",
            ""id"": ""7f3e14c0-b96b-4e95-85cd-8a27c4a7aeeb"",
            ""actions"": [
                {
                    ""name"": ""YawPitchRotation"",
                    ""type"": ""Value"",
                    ""id"": ""f96a7d97-f0b7-4bec-9a59-5f291b47205e"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""XZMovement"",
                    ""type"": ""Value"",
                    ""id"": ""fe94bdff-b1d3-4b3b-9a05-39d6a64c02ef"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""YMovement"",
                    ""type"": ""Value"",
                    ""id"": ""2d5ff221-5245-4877-a5e6-4c3fff09375b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToolRotationPower"",
                    ""type"": ""Value"",
                    ""id"": ""19ea8bf3-0169-4340-817e-8218117770fa"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CycleAerator"",
                    ""type"": ""Button"",
                    ""id"": ""2e39fb7f-4118-400f-95c2-d9cc5e5860d9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c9a0f75-96e3-469a-abf6-cd4b6b007c32"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XZMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be7fbfa8-5df1-4676-81fd-27790500e702"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YawPitchRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""eb27bc62-8d09-4e70-8930-79e2fa1e006b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9fca9ba3-041e-4cb7-9331-753f8ec27e58"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4a94937f-0ca7-437d-acfd-5eca5dda0470"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d29d527d-3599-4871-965e-f5386a509b9c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b71eac27-bfba-46b2-9910-e6429ebc5add"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f142028c-1834-4623-85ad-43c0a160fe89"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToolRotationPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5ca71d1-0a4c-4ae4-a424-46c496a1df2a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleAerator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamepadMap
        m_GamepadMap = asset.FindActionMap("GamepadMap", throwIfNotFound: true);
        m_GamepadMap_YawPitchRotation = m_GamepadMap.FindAction("YawPitchRotation", throwIfNotFound: true);
        m_GamepadMap_XZMovement = m_GamepadMap.FindAction("XZMovement", throwIfNotFound: true);
        m_GamepadMap_YMovement = m_GamepadMap.FindAction("YMovement", throwIfNotFound: true);
        m_GamepadMap_ToolRotationPower = m_GamepadMap.FindAction("ToolRotationPower", throwIfNotFound: true);
        m_GamepadMap_CycleAerator = m_GamepadMap.FindAction("CycleAerator", throwIfNotFound: true);
    }

    ~@ToolInputActions()
    {
        UnityEngine.Debug.Assert(!m_GamepadMap.enabled, "This will cause a leak and performance issues, ToolInputActions.GamepadMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamepadMap
    private readonly InputActionMap m_GamepadMap;
    private List<IGamepadMapActions> m_GamepadMapActionsCallbackInterfaces = new List<IGamepadMapActions>();
    private readonly InputAction m_GamepadMap_YawPitchRotation;
    private readonly InputAction m_GamepadMap_XZMovement;
    private readonly InputAction m_GamepadMap_YMovement;
    private readonly InputAction m_GamepadMap_ToolRotationPower;
    private readonly InputAction m_GamepadMap_CycleAerator;
    public struct GamepadMapActions
    {
        private @ToolInputActions m_Wrapper;
        public GamepadMapActions(@ToolInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @YawPitchRotation => m_Wrapper.m_GamepadMap_YawPitchRotation;
        public InputAction @XZMovement => m_Wrapper.m_GamepadMap_XZMovement;
        public InputAction @YMovement => m_Wrapper.m_GamepadMap_YMovement;
        public InputAction @ToolRotationPower => m_Wrapper.m_GamepadMap_ToolRotationPower;
        public InputAction @CycleAerator => m_Wrapper.m_GamepadMap_CycleAerator;
        public InputActionMap Get() { return m_Wrapper.m_GamepadMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamepadMapActions set) { return set.Get(); }
        public void AddCallbacks(IGamepadMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GamepadMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamepadMapActionsCallbackInterfaces.Add(instance);
            @YawPitchRotation.started += instance.OnYawPitchRotation;
            @YawPitchRotation.performed += instance.OnYawPitchRotation;
            @YawPitchRotation.canceled += instance.OnYawPitchRotation;
            @XZMovement.started += instance.OnXZMovement;
            @XZMovement.performed += instance.OnXZMovement;
            @XZMovement.canceled += instance.OnXZMovement;
            @YMovement.started += instance.OnYMovement;
            @YMovement.performed += instance.OnYMovement;
            @YMovement.canceled += instance.OnYMovement;
            @ToolRotationPower.started += instance.OnToolRotationPower;
            @ToolRotationPower.performed += instance.OnToolRotationPower;
            @ToolRotationPower.canceled += instance.OnToolRotationPower;
            @CycleAerator.started += instance.OnCycleAerator;
            @CycleAerator.performed += instance.OnCycleAerator;
            @CycleAerator.canceled += instance.OnCycleAerator;
        }

        private void UnregisterCallbacks(IGamepadMapActions instance)
        {
            @YawPitchRotation.started -= instance.OnYawPitchRotation;
            @YawPitchRotation.performed -= instance.OnYawPitchRotation;
            @YawPitchRotation.canceled -= instance.OnYawPitchRotation;
            @XZMovement.started -= instance.OnXZMovement;
            @XZMovement.performed -= instance.OnXZMovement;
            @XZMovement.canceled -= instance.OnXZMovement;
            @YMovement.started -= instance.OnYMovement;
            @YMovement.performed -= instance.OnYMovement;
            @YMovement.canceled -= instance.OnYMovement;
            @ToolRotationPower.started -= instance.OnToolRotationPower;
            @ToolRotationPower.performed -= instance.OnToolRotationPower;
            @ToolRotationPower.canceled -= instance.OnToolRotationPower;
            @CycleAerator.started -= instance.OnCycleAerator;
            @CycleAerator.performed -= instance.OnCycleAerator;
            @CycleAerator.canceled -= instance.OnCycleAerator;
        }

        public void RemoveCallbacks(IGamepadMapActions instance)
        {
            if (m_Wrapper.m_GamepadMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamepadMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GamepadMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamepadMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamepadMapActions @GamepadMap => new GamepadMapActions(this);
    public interface IGamepadMapActions
    {
        void OnYawPitchRotation(InputAction.CallbackContext context);
        void OnXZMovement(InputAction.CallbackContext context);
        void OnYMovement(InputAction.CallbackContext context);
        void OnToolRotationPower(InputAction.CallbackContext context);
        void OnCycleAerator(InputAction.CallbackContext context);
    }
}
